(define-module ralph/runtime.test
  import: (ralph/test
           ralph/format
           ralph/stream
           (ralph/date rename: (<date> <foobar>))))

;; test expansion
(define-function foo (if)
  23)
(check-equal "macroexpansion: (if .. ) mustn't be expanded"
             23 (foo 23))

;; true?
(check-false "true?: null isn't true"
             (true? (%native "null")))
(check-false "true?: undefined isn't true"
             (true? (%native "undefined")))
(check-true "true?: 0 is true"
            (true? 0))
(check-true "true?: \"0\" is true"
            (true? "0"))
(check-true "true?: \"\" is true"
            (true? ""))

;; equality
(check-false "equality: 0 not false"
             (= 0 #f))
(check-true "equality: 1 and 1 are equal"
            (= 1 1 1))
(Check-false "equality: 1 and 2 are unequal"
             (= 1 2 1))
(check-false "equality: #f and 0 are unequal"
             (= #f #f 0))
(check-true "equality: array with same contents"
            (= [1 3 4 2] [1 3 4 2]))
(check-false "equality: array with different contents"
             (= [1 3 4 2] [4 2 1 3]))
(check-false "equality: undefined and #t"
             (= (%native "undefined") #t))
(check-true "equality: undefined and #f"
            (= (%native "undefined") #f))
(check-false "equality: object and undefined"
             (= (make-object) (%native "undefined")))
(check-false "equality: 0 and undefined"
             (= 0 (%native "undefined")))

;; or
(check-equal "or: \"\" is true"
             "" (or "" 1))
(check-equal "or: \"0\" is true"
             "0" (or "0" 1))
(check-equal "or: 0 is true"
             0 (or 0 1))

;; and
(check-false "and: #f is false"
             (and #f 1))
(check-equal "and: \"\" is true"
             1 (and "" 1))
(check-equal "and: \"\" is true"
             1 (and "0" 1))
(check-equal "and: \"\" is true"
             "" (and #t ""))
(check-equal "and: \"0\" is true"
             "0" (and #t "0"))
(check-equal "and: 0 is true"
             0 (and #t 0))
(check-false "and: #f is false"
             (and #t #f))
(check-true "and: #t is true"
            (and #t #t))
(check-true "and: 0 and 0"
            (and 0 0))


;; when
(check-true "when: and of \"\", \"0\" and 0 is true"
            (when (and "" "0" 0)
              #t))

;; rest
(check-equal "#rest: #1"
             1 (+ 1))
(check-equal "#rest: #2"
             3 (+ 1 2))
(check-equal "#rest: #3"
             10 (+ 1 2 3 4))

;; kewords
(check-equal "keywords: equality"
             test: test:)
(define-function foobar (#key (test 2))
  test)
(check-equal "keyword arguments: default value"
             2 (foobar))
(check-equal "keyword arguments: passed value"
             3 (foobar test: 3))

;; bind
(check-equal "bind: nested"
             2 (bind ((x 0)
                      (y (+ x 1)))
                 (bind ((y (+ y 1)))
                   y)))

(bind ((a 1)
       (b 2)
       (c 3))
  (bind ((a a)
         (b c)
         (c a))
    (check-equal "bind: a" a 1)
    (check-equal "bind: b" b 3)
    (check-equal "bind: c" c 1)))



;; parallel-set!
(bind ((i 0)
       (v 0))
  (parallel-set!
   i 1
   v (inc i))
  (check-equal "parallel-set!: i = 0 set to 1"
               1 i)
  (check-equal "parallel-set!: v = 0 set to incremented i still 1"
               1 v))

;; block
(check-true "block: without non-local-exit function"
            (block () #t))
(check-true "block: with non-local-exit function"
            (block (return)
              (return #t)
              #f))
(check-equal "block: invoke non-local-exit function with value"
             2 (block (foo)
                 1
                 (foo 2)
                 3))
(check-equal "block: invoke non-local-exit function from inside nested method"
             3 (block (exit)
                 (do (method (item)
                       (when (== item 3)
                         (exit item)))
                     [1 2 3 4])
                 5))
(check-equal "block: invoke non-local-exit function from inside another block"
             [3 5] (bind (inner)
                   (block (exit1)
                     1
                     (set! inner (block (exit2)
                                   2
                                   (exit2 3)
                                   4))
                     [inner 5])))
(check-equal "block: invoke outer non-local-exit function from inside another block"
             3 (bind (inner)
                 (block (exit1)
                   1
                   (set! inner (block (exit2)
                                 2
                                 (exit1 3)
                                 4))
                   5)))

;; signal
(check-condition "signal <error>" <error>
                 (method ()
                   (signal (make <error> message: "!"))
                   #f))


(check-true "binary<: 0 < 1"
            (binary< 0 1))
(check-true "<: 1 < 2 < 3 < 4"
            (< 1 2 3 4))
(check-false "<: 2 > 1"
             (< 2 1 3 4))
(check-false "<: 3 > 2"
             (< 3 2 1 4))
(check-false "<: 4 > 3"
             (< 4 3 2 1))
(check-true ">: 1 > 0"
            (> 1 0))
(check-false ">: 1 = 1"
             (> 1 1))
(check-false ">: 2 < 3"
             (> 2 3 4))
(check-true ">: 4 > 3"
            (> 4 3 2))
(check-true "<=: 1 <= 1"
            (<= 1 1))
(check-true "<=: 1 <= 2"
            (<= 1 2))
(check-false "<=: 2 > 1"
             (<= 2 1))
(check-true ">=: 1 <= 1"
            (>= 1 1))
(check-true ">=: 2 >= 1"
            (>= 2 1))
(check-false ">=: 1 < 2"
             (>= 1 2))

;; reduce
(check-equal "reduce: + on 1, 2, 3, 4, 5"
             15 (reduce1 + [1 2 3 4 5]))
(check-equal "reduce1: + with 1 on 2, 3, 4, 5"
             15 (reduce + 1 [2 3 4 5]))

;; apply
(check-equal "apply: + with 1 and 2, 3, 4, 5"
             15 (apply + 1 [2 3 4 5]))
(check-equal "apply: + with 1, 2, 3 and 4, 5"
             15 (apply + 1 2 3 [4 5]))

;; complement
(check-true "complement: binary<"
            ((complement binary<) 1 0))
(check-false "complement: and"
             ((complement (method (a b)
                            (and a b)))
             #t #t))

;; for
(check-equal "for: increment until i = 0 > 10"
             11 (for ((i 0 (inc i)))
                     ((> i 10) i)))
(check-equal "for: 10!"
             3628800 (for ((i 10 (dec i))
                           (v 1 (* v i)))
                          ((<= i 0) v)))

;; element
(check-equal "element: 1st element is 1"
             1 (element [1 2 3] 0))
(check-equal "element: 2nd element is 2"
             2 (element [1 2 3] 1))

;; but-last
(check-equal "but-last: second last element of 1, 2, 3 is 2"
             2 (last (but-last [1 2 3])))
(check-equal "but-last: third last element of 1, 2, 3, 4 is 2"
             2 (last (but-last [1 2 3 4] 2)))

;; repeatedly
(bind ((i 0))
  (check-equal "repeatedly: number generation"
               (repeatedly (method ()
                             (inc! i))
                           5)
               [1 2 3 4 5]))

;; max/min
(check-equal "max:" (max 4 2 -1 6 3) 6)
(check-equal "min:" (min 4 2 -1 6 3) -1)

;; instance?
(check-true "instance?: \"test\" is a String"
            (instance? "test" (%native "String")))
(check-true "instance?: 1 is a Number"
            (instance? 1 (%native "Number")))
(check-true "instance?: \"test\" is a <string>"
            (instance? "test" <string>))
(check-true "instance?: 1 is a <number>"
            (instance? 1 <number>))
(check-true "instance?: [1, 2] is a <array>"
            (instance? [1 2] <array>))
(check-true "instance?: \"test\" is a <string>"
            (apply instance? "test" [<string>]))
(check-true "instance?: 1 is a <number>"
            (apply instance? 1 [<number>]))
(check-true "instance?: [1, 2] is a <array>"
            (apply instance? [1 2] [<array>]))
(check-true "instance?: a: is a <keyword>"
            (instance? a: <keyword>))
(check-true "instance?: #t is a <boolean>"
            (instance? #t <boolean>))
(check-true "instance?: #f is a <boolean>"
            (instance? #f <boolean>))

(define-class <a> (<object>))
(define-class <b> (<a>))
(define-class <c> (<b>))

(check-true "instance?: <a> 1"
            (instance? (make <a>) <a>))
(check-true "instance?: <a> 2"
            (instance? (make <b>) <a>))
(check-true "instance?: <a> 3"
            (instance? (make <c>) <a>))
(check-false "instance?: subclass 1"
             (instance? (make <a>) <b>))
(check-false "instance?: subclass 2"
             (instance? (make <a>) <c>))

;;
(check-equal "type: null is <boolean>"
             (type (%native "null")) <boolean>)
(check-equal "type: undefined is <boolean>"
             (type (%native "undefined")) <boolean>)

;; setter definition before getter
(define-function (setter foo) (object new-value)
  (set! (%get-property object "foo") new-value))

(define-function foo (object)
  (%get-property object "foo"))

(bind ((bar (make <object>)))
  (set! (foo bar) 1)
  (check-equal "function: setter before getter"
               1 (foo bar)))

;; any? and rcurry
(check-equal "rcurry: (element x 1) on 0, 1, 2"
             1 ((rcurry element 1) [0 1 2]))
(check-true "any? and rcurry: x > 2 on 1, 2, 3, 4"
            (any? (rcurry > 2) [1 2 3 4]))
(check-equal "any?"
             0
             (any? identity [0 ""]))

(check-equal "size: array [1 2 3]"
             3 (size [1 2 3]))
(check-equal "size: object"
             0 (size (make-object)))
(check-equal "size: #f"
             0 (size #f))

;; scope
(bind ((elements [0 1 2 3 4 5 6 7 8 9])
       (fns []))
  (for ((i 0 (+ i 1)))
       ((>= i (size elements)))
    (bind ((el (element elements i)))
      (push-last fns (method ()
                        el))))
  (check-equal "scope: bind in for loop builds closures"
               2 ((element fns 2))))

(check-equal "dotimes: count form only evaluated at beginning"
             9 (last (bind ((numbers (make <array>)))
                       (dotimes (i (- 10 (size numbers)) numbers)
                         (push-last numbers i)))))

;; find-key
(bind ((array [0 0 0 1 0 0 1 0 0]))
  (check-equal "find-key: from start: first element > 0"
               3 (find-key array
                           (rcurry > 0)))
  (check-equal "find-key: from start: second element > 0"
             6 (find-key array
                         (rcurry > 0)
                         skip: 1))
  (check-false "find-key: from start: no third element > 0"
               (find-key array
                         (rcurry > 0)
                         skip: 2));
  (check-equal "find-key: from end: first element > 0"
               6 (find-key array
                           (rcurry > 0)
                           from-end?: #t))
  (check-equal "find-key: from end: second element > 0"
               3 (find-key array
                           (rcurry > 0)
                           from-end?: #t
                           skip: 1))
  (check-false "find-key: from end: no third element > 0"
               (find-key array
                         (rcurry > 0)
                         from-end?: #t
                         skip: 2)))


;; replace-subsequence!
(bind ((foo ["a" "b" "c" "d" "e"]))
  (replace-subsequence! foo ["x" "y" "z"] end: 1)
  (check-equal "replace-subsequence!: start only"
               ["x" "y" "z" "b" "c" "d" "e"]
               foo)
  (replace-subsequence! foo ["x" "y" "z"] start: 4)
  (check-equal "replace-subsequence!: end only"
               ["x" "y" "z" "b" "x" "y" "z"]
               foo)
  (replace-subsequence! foo ["a" "b" "c"]
                        start: 2 end: 4)
  (check-equal "replace-subsequence!: start and end"
               ["x" "y" "a" "b" "c" "x" "y" "z"]
               foo))

;; replace-subsequence
(bind ((foo ["a" "b" "c" "d" "e"]))
  (check-equal "replace-subsequence: start only"
               ["x" "y" "z" "b" "c" "d" "e"]
               (replace-subsequence foo ["x" "y" "z"] end: 1))
  (check-equal "replace-subsequence: end only"
               ["a" "b" "x" "y" "z"]
               (replace-subsequence foo ["x" "y" "z"] start: 2))
  (check-equal "replace-subsequence: start and end"
               ["a" "b" "x" "y" "z" "e"]
               (replace-subsequence foo ["x" "y" "z"]
                                    start: 2 end: 4)))

;; destructuring-bind
(destructuring-bind (a (b c) d ((e f) g))
    [1 [2 3] 4 [[5 6] 7]]
  (check-true "destructuring-bind: nested"
              (and (== a 1) (== b 2) (== c 3)
                   (== d 4) (== e 5) (== f 6) (== g 7))))

;; every?
(check-true "every?"
            (every? (method (x)
                      (> x 0))
                    [1 2 3 4]))

(check-true "every? true"
            (every? true?
                    [#t #t #t #t]))

(check-false "every? false"
             (every? true?
                     [#t #t #t #f]))

;; any?
(check-true "any? true"
            (any? true?
                  [#f #t #t #f]))

(check-false "any? false"
             (any? true?
                   [#f #f #f #f]))

;; bind-methods
(bind-methods ((test1 (a)
                 (+ a 1))
               (test2 (b)
                 (+ b 2)))
  (check-equal "bind-methods: 1"
               2 (test1 1))
  (check-equal "bind-methods: 2"
               3 (test2 1)))

;; get setter/getter
(bind ((x (make <object>)))
  (set! (get x "1" "2" "3") 4)
  (check-equal "get: '1' -> '2' -> '3' = 4"
               4 (get x "1" "2" "3")))

;; handler-case
(check-equal "handler-case: protected form returns value"
             2 (bind ((val (handler-case
                             (begin 1 2)
                             ((<error> condition: condition)
                              3))))
                 val))

(check-equal "handler-case: protected form fails"
             3 (bind ((val (handler-case
                             (begin 1 x 2)
                             ((<error> condition: condition)
                              3))))
                 val))


;; if-bind
(check-true "if-bind: test is true, shouldn't be visible in then"
            (if-bind (a #t)
              a
              (handler-case
               (begin
                a
                #f)
               ((<error> condition: condition)
                #f))))

(define-generic test (object))

(define-method test ((string <string>))
  1)

(define-method test ((number <number>))
  2)

(define-method (setter test) ((object <object>) new-value)
  4)

(define-method test ((object <object>))
  3)

(check-equal "generic: specialized on <string>"
             1 (test "test"))
(check-equal "generic: specialized on <number>"
             2 (test 1))
(bind ((x (make <object>)))
  (check-equal "generic: setter before getter, get"
               3 (test x))
  (check-equal "generic: setter before getter, set"
               4 (set! (test x) 0)))

;; inc!
(bind ((x (make <object>)))
  (set! (get x "y") 0)
  (inc! (get x "y"))
  (check-equal "inc!: 0 -> 1"
               1 (get x "y")))

;; position
(check-equal "position: find 2 in (1 2 3)"
             1 (position [1 2 3] 2))
(check-false "position: find 2 in ()"
             (position [] 2))
(check-equal "position: find 2 in (1 2 3 2)"
             1 (position [1 2 3 2] 2))

;; count
(check-equal "count: 'x in '()"
             0 (count 'x '()))
(check-equal "count: 'x in '(a b c d)"
             0 (count 'x '(a b c d)))
(check-equal "count: 'x in '(a b x c d)"
             1 (count 'x '(a b x c d)))
(check-equal "count: 'x in '(a b x c d x)"
             2 (count 'x '(a b x c d x)))
(check-equal "count: 'x in '(a b x c d x x)"
             3 (count 'x '(a b x c d x x)))


;; <string-stream>
(bind ((stream (make <string-stream> string: "test")))
  (check-false "<string-stream>: not at end when starting"
               (stream-at-end? stream))
  (check-true "<string-stream>: peeking doesn't advance the stream"
              (and (== "t" (stream-peek stream))
                   (== "t" (stream-peek stream))))
  (check-true "<string-stream>: reading advances the stream"
              (and (== "t" (stream-read-element stream))
                   (== "e" (stream-read-element stream))))
  (stream-read-element stream)
  (stream-read-element stream)
  (check-true "<string-stream>: at end when done"
              (stream-at-end? stream)))
(bind ((stream (make <string-stream>)))
  (check-equal "<string-stream>: empty contents when starting"
               "" (stream-contents stream))
  (stream-write stream "FOO")
  (check-equal "<string-stream>: simple write"
               "FOO" (stream-contents stream))
  (check-true "<string-stream>: writing advances, always at end"
              (stream-at-end? stream))
  (stream-write stream "BAR")
  (check-equal "<string-stream>: another write, check contents"
               "FOOBAR" (stream-contents stream))
  (stream-unread-element stream)
  (check-equal "<string-stream>: stream-unread-element"
               "R" (stream-read-element stream))
  (stream-unread-element stream)
  (stream-unread-element stream)
  (check-equal "<string-stream>: stream-remaining-contents"
               "AR" (stream-remaining-contents stream))
  (stream-unread-element stream)
  (stream-read-through stream "A")
  (check-equal "<string-stream>: stream-read-through"
               "R" (stream-read-element stream)))


;; format
(check-equal "format-to-string: numbers and escaping"
             "1%2" (format-to-string "%d%%%d" 1 2))
(check-equal "format-to-string: method"
             "x%test%x" (format-to-string "x%mx"
                          (method (stream)
                            (stream-write stream "%test%"))))
(check-equal "format-to-string: description of <string>"
             "\"TEST\"" (format-to-string "%=" "TEST"))

;; classes

(define-generic foo (object))

(define-class <a> ())

(define-class <b> (<a>))

(define-class <c> (<b>))

(define-class <d> (<c>))

(define-class <e> (<d>))

(define-method foo ((object <a>))
  1)

(define-method foo ((object <b>))
  2)

(check-equal "classes: <b> inherits <a>: foo on <a>"
             1 (foo (make <a>)))

(check-equal "classes: <b> inherits <a>: foo on <b>"
             2 (foo (make <b>)))

(check-equal "classes: <c> inherits <b>: foo on <c>"
             2 (foo (make <c>)))

;; next-method
(define-generic bar (object x))

(define-method bar ((object <a>) a)
  (set! (get object "next")
        next-method)
  (set! (get object "a") a))

(define-method bar ((object <b>) b)
  (next-method object "a")
  (set! (get object "b") b))

(define-method bar ((object <d>) d)
  (next-method object "b")
  (set! (get object "d") d))

(define-method bar ((object <e>))
  (call-next-method))

(bind ((e (make <e>)))
  (bar e "d")
  (check-false "next-method: last method shouldn't have a next"
               (get e "next"))
  (check-true "next-method: all methods visited"
              (and (== (get e "d") "d")
                   (== (get e "b") "b")
                   (== (get e "a") "a"))))

;; next-method for setters
(define-method (setter bar) ((a <a>) value)
  (set! (get a "value") value))

(define-method (setter bar) ((c <c>) value)
  (next-method c 1))

(bind ((d (make <d>)))
  (set! (bar d) 2)
  (check-equal "next-method: setter" 1 (get d "value")))


;; keyword arguments for setters

(define-function (setter special-foo) (object value #key test)
  (and (== value "a")
       (== test "b")))

(check-true "setters: keyword arguments"
            (set! (special-foo #f) "a"
                  test: "b"))

;; remove
(bind ((array [1 2 3]))
  (remove! array 2)
  (check-equal "remove!: 2 from (1 2 3)"
               [1 3] array))

(check-equal "remove: 2 from (1 2 3)"
             [1 3] (remove [1 2 3] 2))

(define-class <x> ()
  x
  (a 1))

(define-class <y> (<x>))

(define-class <z> (<y>)
  z
  (c 3))

(define-method initialize ((object <z>) #rest rest)
  (apply next-method object rest))

(bind ((z (make <z> x: 1 z: 2))
       (x (make <x>)))
  (check-equal "slots: keyword initializer (1)"
               1 (get z "x"))
  (check-equal "slots: keyword initializer (2)"
               2 (get z "z"))
  (check-equal "slots: default value (1)"
               1 (get x "a"))
  (check-equal "slots: default value (2)"
               3 (get z "c")))


;; default initializer
(define-class <test> (<object>)
  foo
  bar
  (baz 3)
  blub)

(define-method initialize ((test <test>) #rest rest)
  (apply next-method test rest)
  (set! (get test "blub") 4))

(bind ((test (make <test> foo: 1 bar: 2)))
  (check-equal "type: default initializer for slot 1"
               1 (get test "foo"))
  (check-equal "type: default initializer for slot 2"
               2 (get test "bar"))
  (check-equal "type: default initializer for slot 3"
               3 (get test "baz"))
  (check-equal "type: default initializer for slot 4"
               4 (get test "blub")))


;;
(bind ((object (make-object
                "a" 4 "b" 3
                "c" 2 "d" 1)))
  ;; bind-properties
  (bind-properties (a d) object
    (check-equal "bind-properties: a = 4" a 4)
    (check-equal "bind-properties: d = 4" d 1))
  ;; as-property-list
  (check-equal "as-property-list: strings"
               (as-property-list object)
               ["a" 4 "b" 3 "c" 2 "d" 1])
  (check-equal "as-property-list: keywords"
               (as-property-list object
                                 keywords?: #t)
               [a: 4 b: 3 c: 2 d: 1])
  ;; as-association-list
  (check-equal "as-association-list: strings"
               (as-association-list object)
               [["a" 4] ["b" 3] ["c" 2] ["d" 1]])
  (check-equal "as-association-list: keywords"
               (as-association-list object
                                 keywords?: #t)
               [[a: 4] [b: 3] [c: 2] [d: 1]])
  ;; extend!
  (check-equal "extend!: return extended object"
               object (extend! object
                               (make-object "b" 8
                                            "d" 0)))
  (check-equal "extend!: a = 4" (get object "a") 4)
  (check-equal "extend!: b = 8" (get object "b") 8)
  (check-equal "extend!: c = 2" (get object "c") 2)
  (check-equal "extend!: d = 0" (get object "d") 0))

;; as-object
(bind ((object (as-object [b: 2 a: 1])))
  (check-equal "as-object: a = 1"
               (get object "a") 1)
  (check-equal "as-object: b = 2"
               (get object "b") 2))

(bind ((string "this is a test")
       (prefix1 "this")
       (prefix2 "thus")
       (prefix3 "foo"))
  (check-true "starts-with?: 1"
              (starts-with? string prefix1))
  (check-false "starts-with?: 2"
               (starts-with? string prefix2))
  (check-false "starts-with?: 3"
               (starts-with? string prefix3)))

;; select
(check-true "select: test expression"
 (select 1 (method (a b)
             (== "a" b))
   ((1) #f)
   (("a") #t)))

(bind ((object (make-object)))
  (check-true "select: primitive test"
              (select object ==
                      (((make-object)) #f)
                      ((object) #t))))

;; for-each

(bind ((a [1 2 3])
       (b []))
  (for-each ((item a))
            ()
    (push b item))
  (check-equal "for-each: simple without condition"
               [3 2 1] b))

(bind ((a [1 2 3])
       (b []))
  (for-each ((item a))
            ()
    (push b (method () item)))
  (check-equal "for-each: simple without condition and closure"
               [3 2 1] (map apply b)))

(bind ((s [5 7 9 10])
       (uneven []))
  (check-equal "for-each: find even? in [5 7 9 10]"
               10 (for-each ((number s))
                            ((even? number) number)
                    (push-last uneven number)))
  (check-equal "for-each: uneven are [5 7 9]"
               [5 7 9] uneven))

(bind ((s [5 7 9 10])
       (uneven []))
  (check-equal "for-each: find even? in [5 7 9 10]"
               10 (for-each ((number s))
                            ((even? number) number)
                    (push-last uneven (method ()
                                        number))))
  (check-equal "for-each: uneven are [5 7 9]"
               [5 7 9] (map apply uneven)))

(bind ((object (make-object
                "a" (make-object
                     "b" 23)))
       (x []))
    (check-equal "inlining: temporaries"
                 23 (get (get (begin
                               (or #f #t)
                               (push-last x 1)
                               object)
                              "a")
                         "b")))
(bind ((result []))
  (for-each ((a [1 2 3])
             (b [4 5 6]))
            ()
    (push-last result (+ a b)))
  (check-equal "for-each: two sequences, no end test"
               [5 7 9]
               result))


;; sort
(bind ((x [[a: 3] [b: 1] [c: 4] [d: 2]]))
  (check-equal "sort: key"
               [[b: 1] [d: 2] [a: 3] [c: 4]]
               (sort x key: second))
  (check-equal "sort: key and test"
               [[c: 4] [a: 3] [d: 2] [b: 1]]
               (sort x test: > key: second)))

;; group-by
(check-equal "group-by"
             ["1" ["a"] "2" ["as" "aa"] "3" ["asd"]]
             (as-property-list
              (group-by size ["a" "as" "asd" "aa"])))

(check-equal "compose"
             3
             ((compose size rest) [1 2 3 4]))

(check-no-error "import renaming"
                (curry make <foobar>))


;; hygiene
(define-function test-hygiene (#rest rest)
  (bind ((result []))
    (for-each ((x [1 2 3]))
              ()
      (push-last result x))
    (check-equal "hygiene: result" result [1 2 3])
    (check-equal "hygiene: rest" rest ["a" "b" "c"])))

(test-hygiene "a" "b" "c")


;; partition
(check-equal "partition: #1"
             [[1 2 3] [4 5 6] [7 8]]
             (partition 3 [1 2 3 4 5 6 7 8]))

(check-equal "partition: #2"
             [[1 2 3] [4 5 6]]
             (partition 3 [1 2 3 4 5 6]))

(check-equal "partition: empty array"
             []
             (partition 3 []))

;; substring
(check-equal "substring: only start: 0"
             "123456789"
             (substring "123456789" 0))
(check-equal "substring: only start: 1"
             "23456789"
             (substring "123456789" 1))
(check-equal "substring: only start: 2"
             "3456789"
             (substring "123456789" 2))
(check-equal "substring: start and end: 2, 3"
             "3"
             (substring "123456789" 2 end: 3))
(check-equal "substring: start and end: 2, 4"
             "34"
             (substring "123456789" 2 end: 4))
(check-equal "substring: start and end: 2, 5"
             "345"
             (substring "123456789" 2 end: 5))
(check-equal "substring: start and length: 2, 1"
             "3"
             (substring "123456789" 2 length: 1))
(check-equal "substring: start and length: 2, 2"
             "34"
             (substring "123456789" 2 length: 2))
(check-equal "substring: start and length: 2, 3"
             "345"
             (substring "123456789" 2 length: 3))
(check-equal "substring: start, length and end: 2, 2, 8"
             "34"
             (substring "123456789" 2 length: 8 end: 4))
(check-equal "substring: start, length and end: 2, 8, 4"
             "34"
            (substring "123456789" 2 length: 8 end: 4))


;; remove-property!
(bind ((object (%object)))
  (check-false "remove-property!: removing non-existing property returns false (one, non-existing property)"
               (remove-property! object "x")))

(bind ((object (%object "x" 1)))
  (check-equal "remove-property!: removing returns value (one, existing property)"
               1 (remove-property! object "x"))
  (check-false "remove-property!: property doesn't exist after removing (one, existing property)"
               (has? object "x")))

(bind ((object (%object "x" (%object "y" 2))))
  (check-false "remove-property!: removing non-existing property returns false (two, non-existing properties)"
               (remove-property! object "z" "y"))
  (check-equal "remove-property!: properties still exist after trying to remove non-existing properties"
               2 (get object "x" "y"))
  (check-equal "remove-property!: removing returns value (two, existing properties)"
               2 (remove-property! object "x" "y"))
  (check-true "remove-property!: property doesn't exist after removing (two, existing properties)"
              (and (has? object "x")
                   (not (has? (get object "x") "y")))))



;; NOTE: add tests ABOVE!

(define-function when ()
  "WHEN")

(check-equal "macroexpansion: respect bindings"
             "WHEN" (when))

(check-equal "macroexpansion: respect local bindings"
             3 (bind ((unless (method () 3)))
                 (unless)))

(check-equal "macroexpansion: respect local method arguments"
             3 ((method (unless)
                  (unless))
                (method () 3)))

;; NOTE: DO NOT add new tests below! when is redefined!

