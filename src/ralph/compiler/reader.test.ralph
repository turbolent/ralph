(define-module ralph/compiler/reader.test
  import: (ralph/test
           ralph/stream
           ralph/compiler/environment
           ralph/compiler/module
           ralph/compiler/reader
           ralph/compiler/special-forms))

(define *environment* (make <environment>
                            module: (make <module> name: "ralph/compiler/reader.test")
                            special-forms: $core-special-forms))

(define-function read-form (source)
  (read (make <string-stream>
              string: source)
        *environment*))

(check-equal "expressions"
             [[(symbol "a")
               [key: [(symbol "b") #t [(symbol "%array" "ralph/core") 1 2]
                      "c" #f (symbol "d") #key]
                     2]]
              [] #rest]
             (read-form "((a (key: (b #t [1 2] \"c\" #f d #key) 2)) () #rest)"))

(check-equal "parens"
             [[[(symbol "a") 1]]]
             (read-form "(((a 1)))"))

(check-equal "special"
             #rest
             (read-form " #rest  "))

(check-equal "one list"
             []
             (read-form "() "))

(bind ((stream (make <string-stream> string: "")))
  (check-equal "empty, no eof-error, default eof-value"
               $end-of-file
               (read stream #f eof-error?: #f)))

(bind ((stream (make <string-stream> string: "")))
  (check-equal "empty, no eof-error, eof-value"
               42
               (read stream #f eof-error?: #f eof-value: 42)))

(bind ((stream (make <string-stream> string: "")))
  (check-condition "empty, eof-error" <string>
                   (method ()
                     (read stream #f eof-value: 42))))

(check-equal "quoted"
             "quoted: \"Q\" "
             (read-form "\"quoted: \\\"Q\\\" \""))

(check-condition "missing end of string"
                 <string>
                 (method ()
                   (read-form "\"bla  ")))

(check-equal "comments"
             [(symbol "this") (symbol "isnt") (symbol "a") (symbol "comment")]
             (read-form "(this; asdasd\n isnt ; asdasd \n; asdasd\n a comment)"))



(bind ((stream (make <string-stream> string: "(a (1)))")))
  (read stream)
  (check-condition "too many closing"
                   <string>
                   (method ()
                     (read stream))))

(check-condition "missing closing"
                 <string>
                 (method ()
                   (read-form "(a (1")))

(check-equal "syntax quote"
             [(symbol "a")
              [(symbol "%array" "ralph/core")
               [(symbol "quote" "ralph/core")
                (symbol "x" "ralph/compiler/reader.test")]
               [(symbol "y") (symbol "z")]]
              [(symbol "%array" "ralph/core")
               (symbol "b")]]
             (read-form "(a `(x ,(y z)) `(,b))"))

(bind ((form (read-form "(test `(foo `(bar)))")))
  (check-equal "nested syntax-quote"
               (read-form
                "(test (ralph/core::%array
                        (ralph/core::quote ralph/compiler/reader.test::foo)
                        (ralph/core::%array
                         (ralph/core::quote ralph/core::%array)
                         (ralph/core::%array
                          (ralph/core::quote ralph/core::quote)
                          (ralph/core::quote ralph/compiler/reader.test::bar)))))")
               form))

(bind ((form (read-form "(test `(is ,cool foo::bar ,(+ 2 3) ,@[4 5 6] `(nested)))")))
  (check-equal "complex syntax-quote"
               (read-form
                "(test (ralph/core::%concat
                        (ralph/core::%concat
                         (ralph/core::%array
                          (ralph/core::quote ralph/compiler/reader.test::is)
                          cool
                          (ralph/core::quote foo::bar)
                          (+ 2 3))
                         (ralph/core::%array 4 5 6))
                        (ralph/core::%array
                         (ralph/core::%array
                          (ralph/core::quote ralph/core::%array)
                          (ralph/core::%array
                           (ralph/core::quote ralph/core::quote)
                           (ralph/core::quote
                            ralph/compiler/reader.test::nested))))))")
               form))
