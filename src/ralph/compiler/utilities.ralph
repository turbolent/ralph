(define-module ralph/compiler/utilities
  import: (ralph/format)
  export: (check-type
           check-identifier
           destructure-parameter-list
           op?
           process-import-names
           transform-setter-identifier
           setter-identifier?
           identifier-name
           special-symbol?))

(define $special-symbol-names 
        ["%all-arguments" "%this-method"])

(define-function special-symbol? (symbol)
  (member? (symbol-name symbol)
           $special-symbol-names))

(define-function check-type (value type format-string)
  (unless (instance? value type)
    (signal (format-to-string format-string value))))

(define-function check-identifier (identifier env format-string)
  (unless (or (not (get identifier "module"))
              (== (get identifier "module")
                  (get env "module" "name")))
    (signal (format-to-string (or format-string
                                  "External identifier: %=")
                              identifier))))

;; => (normal-parameters
;;     rest-parameter
;;     keyword-parameters)
(define-function destructure-parameter-list (list)
  (bind-methods ((position (symbol)
                   (find-key list (curry = symbol))))
    (bind ((rest (position #rest))
           (key (position #key)))
      [(copy-sequence list
                      end: (or rest key
                               (size list)))
       (when rest
         (element list (inc rest)))
       (when key
         (copy-sequence list
                        start: (inc key)))])))

(define-function op? (op exp)
  (and (expression? exp)
       (== (symbol-name (first exp))
           op)))

(define-function process-import-names (all #key only exclude prefix rename)
  (bind-methods ((resolve (exp)
                   (if (instance? exp <string>)
                       exp
                       (identifier-name exp))))
    (bind ((names (as-set (if (instance? only <array>)
                              (map resolve only)
                              all)))
           (renamings (as-object (map resolve
                                      (or rename [])))))
      ;; remove all from exclude
      (do (curry remove! names)
          (map resolve exclude))
      ;; rename overwrites only
      (set-union! names
                  (object-properties renamings))
      ;; prefix or rename
      (map (method (name)
             (if-bind (renaming (get renamings name))
               [name renaming]
               (if (instance? prefix <string>)
                   [name (concatenate prefix name)]
                   name)))
           names))))


;;;; identifiers

(define-function transform-setter-identifier (identifier)
  (symbol (concatenate (symbol-name identifier)
                       "-setter")))

(define-function setter-identifier? (form)
  (and (instance? form <array>)
       (== (size form) 2)
       (every? (rcurry instance? <symbol>)
               form)
       (== (symbol-name (first form))
           "setter")))

(define-function identifier-name (identifier)
  (symbol-name
   (if (setter-identifier? identifier)
       (transform-setter-identifier
        (second identifier))
       identifier)))
