
(define-module ralph/compiler/macros.test
  import: (ralph/test
           ralph/compiler/module
           ralph/compiler/environment
           ralph/compiler/macroexpansion
           ralph/compiler/macros
           ralph/compiler/special-forms))


(define $all-symbol-macros
  (make-plain-object))

(extend! $all-symbol-macros $internal-symbol-macros)
(extend! $all-symbol-macros $core-symbol-macros)

(define $all-macros
  (make-plain-object))

(extend! $all-macros $internal-macros)
(extend! $all-macros $core-macros)


(define-function make-environment ()
  (bind ((module (make <module> name: "ralph/compiler/macros.test")))
    ;; (import-module module "ralph/core")
    (make <environment>
          module: module
          special-forms: $internal-special-forms
          macros: $all-macros
          symbol-macros: $all-symbol-macros)))

(define *environment*
  (make-environment))

;;;; bind


(check-equal "macroexpand-all: bind, b"
             'b
             (macroexpand-all '(bind ()
                                 b)
                              *environment*))


(check-equal "macroexpand-all: bind b"
             `(%bind (,'b (,'+ ,'a 1))
                ,'b)
             (macroexpand-all '(bind ((b (+ a 1)))
                                 b)
                              *environment*))

(check-equal "macroexpand-all: bind a, b"
             `(%bind (,'a 1)
                (%bind (,'b (,'+ ,'a 1))
                  ,'b))
             (macroexpand-all '(bind ((a 1)
                                      (b (+ a 1)))
                                 b)
                              *environment*))

;;;; and

(check-equal "macroexpand-all: and"
             `(%if 1 (%if #t (%if 2 (%if #f 3 #f) #f) #f) #f)
             (macroexpand-all '(and 1 #t 2 #f 3)
                              *environment*))


;;;; or

(reset-symbol-counter!)
(check-equal "macroexpand-all: or"
             `(%bind (,'$1 #f)
                (%if ,'$1
                     ,'$1
                     (%bind (,'$2 2)
                       (%if ,'$2
                            ,'$2
                            3))))
             (macroexpand-all '(or #f 2 3)
                              *environment*))

;;;; cond

(check-equal "macroexpand-all: cond"
             `(%if (,'a)
                   (%begin 1 2)
                   (%if ,'b
                        3
                        (%begin 4 5)))
             (macroexpand-all '(cond
                                ((a) 1 2)
                                (b 3)
                                (else: 4 5))
                              *environment*))

;;;; set!

(check-equal "macroexpand-all: set!"
             `(%set ,'x 1)
             (macroexpand-all '(set! x 1)
                              *environment*))

(check-equal "macroexpand-all: set!"
             `(,'cond-setter ,'x 1)
             (macroexpand-all '(set! (cond x) 1)
                              *environment*))


;;;; parallel-set!

(check-equal "macroexpand-all: parallel-set! 1"
             `(%set ,'x 1)
             (macroexpand-all '(parallel-set! x 1)
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: parallel-set! 2"
             `(%bind (,'$1 1)
                (%begin
                 (%bind (,'$2 (,'+ ,'x 1))
                   (%begin
                    (%set ,'z (,'- ,'x ,'y))
                    (%set ,'y ,'$2)))
                 (%set ,'x ,'$1)))
             (macroexpand-all '(parallel-set! x 1
                                              y (+ x 1)
                                              z (- x y))
                              *environment*))

;;;; select

(reset-symbol-counter!)
(check-equal "macroexpand-all: select"
             `(%bind (,'$1 ,'x)
                (%if (%bind (,'$2 (,'instance? ,'$1 ,'<array>))
                       (%if ,'$2
                            ,'$2
                            (,'instance? ,'$1 ,'<string>)))
                     (%begin
                      (,'print ,'x)
                      (,'slice ,'x 2))
                     (%if (,'instance? ,'$1 ,'<number>)
                          (,'* ,'x 23)
                          (%begin
                           (,'do-sth)
                           ,'else))))
             (macroexpand-all '(select x instance?
                                 ((<array> <string>)
                                  (print x)
                                  (slice x 2))
                                 ((<number>)
                                  (* x 23))
                                 (else:
                                  (do-sth)
                                  else))
                              *environment*))


;;;; bind-properties

(reset-symbol-counter!)
(check-equal "macroexpand-all: bind-properties"
             `(%bind (,'$1 ,'obj)
                (%bind (,'a (%get-property ,'$1 "a"))
                  (%bind (,'b (%get-property ,'$1 "b"))
                    (%begin
                     (,'first ,'a)
                     (,'second ,'b)))))
             (macroexpand-all '(bind-properties (a b) obj
                                 (first a)
                                 (second b))
                              *environment*))

;;;; destructuring-bind

(reset-symbol-counter!)
(check-equal "macroexpand-all: destructuring-bind"
             `(%bind (,'a (%get-property ,'values 0))
                (%bind (,'$1 (%get-property ,'values 1))
                  (%bind (,'b (%get-property ,'$1 0))
                    (%bind (,'c (%get-property ,'$1 1))
                      (%bind (,'$3 (%get-property ,'$1 2))
                        (%bind (,'d (%get-property ,'$3 0))
                          (%bind (,'e (%get-property ,'$3 1))
                            (%bind (,'f (%native-call "$SL.call" ,'$3 2))
                              (%bind (,'$4 (%keys ,'f (%object "g" 1)))
                                (%bind (,'g (%get-property ,'$4 "g"))
                                  (%bind (,'$2 (%native-call "$SL.call" ,'$1 3))
                                    (%bind (,'$5 (%keys ,'$2 (%object "h" 2)))
                                      (%bind (,'h (%get-property ,'$5 "h"))
                                        (%bind (,'i (%get-property ,'values 2))
                                          (,'foo ,'e)))))))))))))))
             (macroexpand-all '(destructuring-bind
                                   (a (b c (d e #rest f #key (g 1)) #key (h 2)) i)
                                   values
                                 (foo e))
                              *environment*))



;;;; method

(reset-symbol-counter!)
(check-equal "macroexpand-all: normal method"
             `(%method ,'$1 (,'a)
                ,'a)
             (macroexpand-all '(method (a)
                                 a)
                              *environment*))

(reset-symbol-counter!)
(check-equal "macroexpand-all: method with rest and keyword arguments"
             `(%method ,'$1 (,'a ,'b)
                (%bind (,'r (%native-call "$SL.call" ,'%all-arguments 2))
                  (%bind (,'$2 (%keys ,'r (%object "c" 1 "d" 2)))
                    (%bind (,'c (%get-property ,'$2 "c"))
                      (%bind (,'d (%get-property ,'$2 "d"))
                        (,'foo ,'c))))))
             (macroexpand-all '(method (a b #rest r #key (c 1) (d 2))
                                 (foo c))
                              *environment*))

;;;; dotimes

(reset-symbol-counter!)
(check-equal "macroexpand-all: dotimes (for, while)"
             `(%bind (,'$1 (,'+ (,'- 3 2)))
                (%bind (,'i 0)
                  (%begin
                   (%while (not (binary>= ,'i ,'$1))
                     (%begin
                      ((%method ,'$2 (,'i)
                         (,'foo ,'i))
                       ,'i)
                      (%set ,'i (inc ,'i))))
                   (,'- ,'i 2))))
             (macroexpand-all '(dotimes (i (+ (- 3 2)) (- i 2))
                                 (foo i))
                              *environment*))


;;;; for-each

(reset-symbol-counter!)
(check-equal "macroexpand-all: for-each with body"
             `(%bind (,'$1 (%array 1 2 3 4))
                (%bind (,'$2 (%array 5 6 7))
                  (%bind (,'$3 #f)
                    (%bind (,'$5 #f)
                      (%bind (,'$4 (%array ,'$1 ,'$2))
                        (%begin
                         (%while (not (%bind (,'$6 ,'$3)
                                        (%if ,'$6 ,'$6 (any? empty? ,'$4))))
                           (%bind (,'a (first ,'$1))
                             (%bind (,'b (first ,'$2))
                               (%if (%bind (,'$7 (,'> ,'a 2))
                                      (%if ,'$7 ,'$7 (,'> ,'b 5)))
                                    (%begin
                                     (%set ,'$5 (%begin
                                                 (,'foo ,'a)
                                                 (,'bar ,'b)))
                                     (%set ,'$3 #t))
                                    (%begin
                                     ((%method ,'$8 (,'a ,'b)
                                        (,'baz ,'a ,'b))
                                      ,'a ,'b)
                                     (%set ,'$1 (rest ,'$1))
                                     (%set ,'$2 (rest ,'$2))
                                     (%set ,'$4 (%array ,'$1 ,'$2)))))))
                         ,'$5))))))
             (macroexpand-all
              '(for-each ((a [1 2 3 4])
                          (b [5 6 7]))
                         ((or (> a 2)
                              (> b 5))
                          (foo a)
                          (bar b))
                 (baz a b))
              *environment*))


(reset-symbol-counter!)
(check-equal "macroexpand-all: for-each without body"
             `(%bind (,'$1 (%array 1 2 3))
                (%bind (,'$2 (%array 1 2 3))
                  (%bind (,'$3 #f)
                    (%bind (,'$5 #f)
                      (%bind (,'$4 (%array ,'$1 ,'$2))
                        (%begin
                         (%while (not (%bind (,'$6 ,'$3)
                                        (%if ,'$6 ,'$6 (any? empty? ,'$4))))
                           (%bind (,'a (first ,'$1))
                             (%bind (,'b (first ,'$2))
                               (%if (,'not (,'binary= ,'a ,'b))
                                 (%begin
                                  (%set ,'$5 #t)
                                  (%set ,'$3 #t))
                                 (%begin
                                  ((%method ,'$7 (,'a ,'b)
                                     #f)
                                   ,'a ,'b)
                                  (%set ,'$1 (rest ,'$1))
                                  (%set ,'$2 (rest ,'$2))
                                  (%set ,'$4 (%array ,'$1 ,'$2)))))))
                         ,'$5))))))
             (macroexpand-all
              '(for-each ((a [1 2 3])
                          (b [1 2 3]))
                         ((not (binary= a b)) #t))
              *environment*))

;;;; next-method


(check-equal "macroexpand-all: next-method"
             `(%begin 1 (%next-method ,'%this-method) 2)
             (macroexpand-all '(begin 1 next-method 2)
                              *environment*))

;;;; dot

(reset-symbol-counter!)
(check-equal "macroexpand-all: dot"
             `(%bind (,'$5 (%bind (,'$4 (%bind (,'$2 ,'node)
                                        (%bind (,'$1 "off")
                                          ((%get-property ,'$2 "removeClass") ,'$1))))
                            (%bind (,'$3 "on")
                              ((%get-property ,'$4 "addClass") ,'$3))))
                ((%get-property ,'$5 "end")))
             (macroexpand-all
              '(. node
                  ("removeClass" "off")
                  ("addClass" "on")
                  (end))
              *environment*))