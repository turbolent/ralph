
(define-module ralph/compiler/anf.test
  import: (ralph/test
           ralph/compiler/macroexpansion
           ralph/compiler/anf
           ralph/compiler/environment.test))


(define *environment*
  (make-test-environment "ralph/compiler/anf.test"))


;;;;

(reset-symbol-counter!)
(check-equal "ANF: simple expression"
             `(+ 1 2)
             (normalize-term
              `(+ 1 2)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: nested expression"
             `(+ (- 2 1) 2)
             (normalize-term `(+ (- 2 1) 2)
                             *environment*))

(reset-symbol-counter!)
(check-equal "ANF: bind"
             '(ralph/core::%bind ($1 (+ 2 2))
                (ralph/core::%bind (x 1)
                  (ralph/core::%bind ($2 (f x))
                    (+ $1 $2))))
             (normalize-term
              (macroexpand-all
               '(+ (+ 2 2)
                   (bind ((x 1))
                     (f x)))
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: begin 1"
             '(ralph/core::%begin
               1
               (ralph/core::%begin
                (+ 2 2)
                (ralph/core::%bind ($1 (- 3 3))
                  (ralph/core::%bind (x 1)
                    (ralph/core::%bind ($2 (f x))
                      (+ $1 $2))))))
             (normalize-term
              (macroexpand-all
               '(begin
                 1
                 (+ (begin (+ 2 2) (- 3 3))
                    (bind ((x 1))
                      (f x))))
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: if: trivial expressions"
             '(ralph/core::%if (= n 0)
                               1
                               (* n (f (- n 1))))
             (normalize-term
              (macroexpand-all
               '(if (= n 0)
                    1
                    (* n (f (- n 1))))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: application"
             '(ralph/core::%bind (id (ralph/core::%method $1 (x) x))
                (ralph/core::%bind (apply (ralph/core::%method $2 (f x) (f x)))
                  ((id apply) (id 3))))
             (normalize-term
              (macroexpand-all
               '(bind ((id (method (x) x))
                       (apply (method (f x) (f x))))
                  ((id apply) (id 3)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: method"
             '(ralph/core::%method $1 (a)
                (ralph/core::%method $2 (b)
                  (ralph/core::%begin
                   (- a b)
                   (+ (- a b) b))))
             (normalize-term
              (macroexpand-all
               '(method (a)
                  (method (b)
                    (- a b)
                    (+ (- a b) b)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: begin 2"
             '(ralph/core::%begin
               1
               (ralph/core::%begin
                (c)
                (ralph/core::%begin
                 (b (+ 1 (a)))
                 (ralph/core::%begin
                  5
                  (- (d) 23)))))
             (normalize-term
              (macroexpand-all
               '(begin
                 1
                 (begin
                  (c)
                  (b (+ 1 (a))))
                 5
                 (- (d) 23))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: nested set!"
             '(ralph/core::%begin
               (ralph/core::%set a (+ (- b 3) c))
               (ralph/core::%set x (* (ralph/core::%set z a) 5)))
             (normalize-term
              (macroexpand-all
               '(begin
                 (set! a (+ (- b 3) c))
                 (set! x (* (set! z a) 5)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: set! with expression"
             '(foo-setter x (+ 2 3))
             (normalize-term
              (macroexpand-all
               '(set! (foo x) (+ 2 3))
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: nested set! with if"
             '(ralph/core::%begin
               (ralph/core::%set a (+ (- b 3) c))
               (ralph/core::%bind ($1 (ralph/core::%if a b c))
                 (ralph/core::%bind ($2 (ralph/core::%set z $1))
                   (ralph/core::%bind ($3 (* $2 5))
                     (ralph/core::%set x $3)))))
             (normalize-term
              (macroexpand-all
               '(begin
                 (set! a (+ (- b 3) c))
                 (set! x (* (set! z (if a b c)) 5)))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: set! with expression and keywords"
             '(foo-setter x (+ 2 3)
                          animated?: (> (bar x) 1))
             (normalize-term
              (macroexpand-all
               '(set! (foo x) (+ 2 3)
                      animated?: (> (bar x) 1))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: or"
             ;; usage of %if as expression OK,
             ;; not in statement form yet
             '(ralph/core::%bind ($1 #f)
                (ralph/core::%bind
                    ($3 (ralph/core::%if $1
                                         $1
                                         (ralph/core::%bind ($2 2)
                                           (ralph/core::%if $2 $2 3))))
                  (foo $3 bar)))
             (normalize-term
              (macroexpand-all
               '(foo (or #f 2 3) bar)
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: while"
             '(ralph/core::%bind (counter 5)
                (ralph/core::%bind (result 1)
                  (ralph/core::%begin
                   (ralph/core::%while (> counter 0)
                     (ralph/core::%begin
                      (ralph/core::%set factorial (* factorial counter))
                      (ralph/core::%set counter (- counter 1))))
                   counter)))
             (normalize-term
              (macroexpand-all
               '(bind ((counter 5)
                       (result 1))
                  (while (> counter 0)
                    (set! factorial (* factorial counter))
                    (set! counter (- counter 1)))
                  counter)
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: while as expression"
             '(ralph/core::%bind (run? #t)
                (ralph/core::%bind
                    (value (ralph/core::%while run?
                             (ralph/core::%begin
                               (foo)
                               (ralph/core::%begin
                                 (ralph/core::%set run? #f)
                                 23))))
                  (== value #f)))
             (normalize-term
              (macroexpand-all
               '(bind ((run? #t)
                       (value
                        (while run?
                          (foo)
                          (set! run? #f)
                          23)))
                  (== value #f))
               *environment*)
              *environment*))


(reset-symbol-counter!)
(check-equal "ANF: while in if"
             '(ralph/core::%bind
                 ($1 (ralph/core::%while run?
                       (foo)))
               (ralph/core::%bind
                   (x (ralph/core::%if $1 42 23))
                 (bar x)))
             (normalize-term
              (macroexpand-all
               '(bind ((x (if (while run?
                                (foo))
                              42
                              23)))
                  (bar x))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: if in while"
             '(ralph/core::%while #t
                (ralph/core::%bind ($1 (foo))
                  (ralph/core::%bind
                      ($2 (ralph/core::%if $1 $1 (bar)))
                    (ralph/core::%if $2
                                     (baz)
                                     (ralph/core::%native "break")))))
             (normalize-term
              (macroexpand-all
               '(while (or (foo) (bar))
                  (baz))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: begin as expression"
             '(ralph/core::%bind ($1 (curry + 1))
                (ralph/core::%begin
                 1
                 (ralph/core::%bind ($2 (+ 2 3))
                   ($1 $2 4))))
             (normalize-term
              (macroexpand-all
               '((curry + 1) (begin 1 (+ 2 3)) 4)
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: select"
             '(ralph/core::%bind ($1 x)
                (ralph/core::%bind
                    ($2 (instance? $1 <array>))
                  (ralph/core::%bind
                      ($3 (ralph/core::%if
                            $2 $2 (instance? $1 <string>)))
                    (ralph/core::%if $3
                                     (ralph/core::%begin
                                      (print x)
                                      (slice x 2))
                                     (ralph/core::%if (instance? $1 <number>)
                                                      (* x 23)
                                                      (ralph/core::%begin
                                                       (do-sth)
                                                       else))))))
             (normalize-term
              (macroexpand-all
               '(select x instance?
                  ((<array> <string>)
                   (print x)
                   (slice x 2))
                  ((<number>)
                   (* x 23))
                  (else:
                   (do-sth)
                   else))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: if in expression"
             '(ralph/core::%method $1 ()
                (bar (ralph/core::%method $2 (item)
                       (ralph/core::%bind
                           ($3 (ralph/core::%if a b c))
                         (baz $3 item)))))
             (normalize-term
              (macroexpand-all
               '(method ()
                  (bar (method (item)
                         (baz (if a b c)
                              item))))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: if in expression 2"
             '(ralph/core::%method $1 ()
                (bar (ralph/core::%method $2 (item)
                       (ralph/core::%bind
                           ($3 (ralph/core::%if c b a))
                         (ralph/core::%bind
                             ($4 (ralph/core::%if a b c))
                           ($3 $4 item))))))
             (normalize-term
              (macroexpand-all
               '(method ()
                  (bar (method (item)
                         ((if c b a)
                          (if a b c)
                          item))))
               *environment*)
              *environment*))

(reset-symbol-counter!)
(check-equal "ANF: while in if in exp"
             '(ralph/core::%bind
                  ($1 (ralph/core::%while run? (foo)))
                (ralph/core::%bind
                    ($2 (ralph/core::%if $1 42 23))
                  (foo $2)))
             (normalize-term
              (macroexpand-all
               '(foo (if (while run?
                           (foo))
                         42
                         23))
               *environment*)
              *environment*))
