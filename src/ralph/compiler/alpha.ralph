(define-module ralph/compiler/alpha
  import: (ralph/compiler/environment
           ralph/compiler/utilities)
  export: (alpha-convert-form))

;; "identifiers" => module name => symbol name => renaming+

(define-function ensure-naming-structure (env module-name name)
  ;; ensure renaming object for env
  (unless (get env "identifiers" module-name)
    (set! (get env "identifiers" module-name)
          (make-object)))
  ;; ensure renaming list for variable
  (bind ((module-renamings (get env "identifiers" module-name)))
    (unless (get module-renamings name)
      (set! (get module-renamings name)
            [])))
  env)

(define $special-symbols '(%all-arguments %this-method))

(define-function rename-definition (identifier env)
  (bind ((new-identifier
          (first (rename-identifiers
                  [identifier] env))))
    (set! (get env "original-identifier"
               (symbol-name new-identifier))
          identifier)
    new-identifier))

(define-function rename-identifiers (identifiers env)
  (map (method (identifier)
         (if (member? identifier $special-symbols)
             identifier
             (destructuring-bind (name module-name)
                 (destructure-symbol identifier)
               (unless module-name
                 (set! module-name
                       (get env "module" "name")))
               (bind ((identifier*
                       (generate-symbol
                        env (unless (get identifier "generated?")
                              name))))
                 (ensure-naming-structure env module-name name)
                 (push (get env "identifiers" module-name name)
                       identifier*)
                 identifier*))))
       identifiers))

(define-function restore-identifiers (identifiers env)
  (for-each ((identifier identifiers))
            ()
    (unless (member? identifier $special-symbols)
      (destructuring-bind (name module-name)
          (destructure-symbol identifier)
        (unless module-name
          (set! module-name (get env "module" "name")))
        (pop (get env "identifiers" module-name name))))))

(define-function find-identifier (identifier env)
  (if (member? identifier $special-symbols)
      identifier
      (destructuring-bind (name module-name)
          (destructure-symbol identifier)
        (unless module-name
          (set! module-name (get env "module" "name")))
        (bind ((renamings (get env "identifiers"
                               module-name name)))
          (when (and renamings
                     (not (empty? renamings)))
            (first renamings))))))

(define-function alpha-convert-form (exp env)
  (alpha-convert exp env identity))

(define-function alpha-convert (exp env k)
  (select exp instance?
    ((<array>)
     (select (symbol-name (first exp)) ==
       (("%quote")
        (k exp))
       (("%bind")
        (destructuring-bind (_ (identifier value) form) exp
          ;; convert value, before renaming
          (alpha-convert
           value env
           (method (value*)
             (destructuring-bind (identifier*)
                 (rename-identifiers [identifier] env)
               (alpha-convert
                form env
                (method (form*)
                  (restore-identifiers [identifier] env)
                  (k `(%bind (,identifier* ,value*)
                        ,form*)))))))))
       (("%method")
        (destructuring-bind (_ name parameters form) exp
          (bind ((identifiers (cons name parameters)))
            (destructuring-bind (name* #rest parameters*)
                (rename-identifiers identifiers env)
              (alpha-convert
               form env
               (method (form*)
                 (restore-identifiers identifiers env)
                 (k `(%method ,name* ,parameters*
                       ,form*))))))))
       ;; skip
       (("%set" "%if" "%begin" "%while" "%native"
         "%native-call" "%infix"
         "%object" "%array" "%get-property")
        (destructuring-bind (op #rest arguments) exp
          (alpha-convert*
           arguments env
           (method (arguments*)
             (k (cons op arguments*))))))
       (("%define")
        (destructuring-bind (_ identifier value) exp
          ;; convert value, before renaming
          (alpha-convert
           value env
           (method (value*)
             (bind ((identifier*
                     (or (find-identifier identifier env)
                         (qualify-symbol identifier env))))
               (k `(%define ,identifier* ,value*)))))))
       (("%try")
        (destructuring-bind (_ protected-form identifier handling-form) exp
          ;; convert protected-form, before renaming
          (alpha-convert
           protected-form env
           (method (protected-form*)
             (destructuring-bind (identifier*)
                 (rename-identifiers [identifier] env)
               (alpha-convert
                handling-form env
                (method (handling-form*)
                  (restore-identifiers [identifier] env)
                  (k `(%try ,protected-form*
                            ,identifier*
                            ,handling-form*)))))))))
       (else:
        (alpha-convert** exp env k))))
    ((<symbol>)
     (if-bind (identifier (find-identifier exp env))
       (k identifier)
       (bind ((symbol (resolve-symbol exp env)))
          (if (== (get symbol "module")
                  (get env "module" "name"))
              (k symbol)
              ;; external, free variable
              (convert-free-variable symbol env k)))))
    (else:
     (k exp))))

(define-function make-external-reference (name module-name env)
  `(%get-property ,(find-import-identifier module-name env)
                  ,name))

(define-function convert-free-variable (symbol env k)
  (destructuring-bind (name module-name)
      (destructure-symbol symbol)
    ;; module import statement required?
    (if-bind (import-identifier (find-import-identifier module-name env))
        ;; module already imported
        (bind ((reference (make-external-reference name module-name env)))
          (alpha-convert reference env k))
        ;; prepend import statement
        (alpha-convert*
            [(make-import-definition module-name env)
             (make-external-reference name module-name env)]
            env
            (method (forms*)
              (destructuring-bind (import* reference*) forms*
                `(%begin ,import* ,(k reference*))))))))


(define-function alpha-convert* (exp* env k)
  (if (empty? exp*)
      (k [])
      (alpha-convert** exp* env k)))

(define-function alpha-convert** (exp env k)
  (alpha-convert
   (first exp) env
   (method (t)
     (alpha-convert*
      (rest exp) env
      (method (t*)
        (k (cons t t*)))))))