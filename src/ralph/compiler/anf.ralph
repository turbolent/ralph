(define-module ralph/compiler/anf
  import: (ralph/compiler/utilities)
  export: (normalize-term))


(define-function atomic? (expression)
  (any? (curry instance? expression)
        [<number> <boolean> <string> <symbol> <keyword>]))

(define-function generates-statements? (exp)
  (if (and (instance? exp <array>)
           (not (empty? exp)))
      (select (symbol-name (first exp)) ==
        (("%begin" "%if" "%while" "%bind" "%try") #t)
        (("%set")
         (generates-statements? (last exp)))
        (("%method") #f)
        (else:
         (any? generates-statements? exp)))
      #f))


(define-function normalize-term (expression env)
  (normalize expression env identity))

(define-function normalize (exp env k)
  (if (and (instance? exp <array>)
           (not (empty? exp)))
      (select (symbol-name (first exp)) ==
        (("%quote")
         (k exp))
        (("%bind")
         (destructuring-bind (_ (identifier value) form) exp
           (normalize
            value env
            (method (value*)
              `(%bind (,identifier ,value*)
                 ,(normalize form env k))))))
        (("%method")
         (destructuring-bind (_ name parameters form) exp
           (k `(%method ,name ,parameters
                 ,(normalize-term form env)))))
        (("%set")
         (destructuring-bind (_ place value) exp
           (if (op? "%get-property" place)
               (normalize**
                (rest place) env
                (method (arguments*)
                  (normalize-value
                   value env
                   (method (value*)
                     (k `(%set (%get-property ,@arguments*)
                               ,value*))))))
               (normalize-value
                value env
                (method (value*)
                  (k `(%set ,place ,value*)))))))
        (("%define" "%var")
         (destructuring-bind (op identifier value) exp
           (normalize-value
            value env
            (method (value*)
              (k `(,op ,identifier ,value*))))))
        (("%if")
         (destructuring-bind (_ test consequent alternate) exp
           (normalize-value
            test env
            (method (test*)
              (k `(%if ,test*
                       ,(normalize-term consequent env)
                       ,(normalize-term alternate env)))))))
        (("%begin")
         (destructuring-bind (_ form #rest forms) exp
           (if (empty? forms)
               (normalize form env k)
               (normalize form env
                          (method (form*)
                            `(%begin
                              ,form*
                              ,(normalize `(%begin  ,@forms)
                                          env k)))))))
        (("%while")
         (destructuring-bind (_ test form) exp
           (k (if (generates-statements? test)
                  `(%while #t
                     ,(normalize-term `(%if ,test
                                            ,(normalize-term form)
                                            (%native "break")
                                            ;; TODO [#A]: #f ?
                                            )
                                      env))
                  `(%while
                    ,(normalize-term test env)
                    ,(normalize-term form env))))))
        (("%try")
         (destructuring-bind
             (_ protected-form identifier handling-form) exp
           (k `(%try ,(normalize-term protected-form env)
                     ,identifier
                     ,(normalize-term handling-form env)))))
        (else:
         (cond
          ((generates-statements? exp)
           (normalize-all exp env k))
          (else:
           (k (map (rcurry normalize-term env)
                   exp))))))
      (k exp)))


(define-function normalize-value (exp env k)
  (if (generates-statements? exp)
      (normalize* exp env k)
      (k (if (instance? exp <array>)
             (map (rcurry normalize-term env)
                  exp)
             exp))))

(define-function normalize* (exp env k)
  (normalize exp env
             (method (exp*)
               (if (atomic? exp*)
                   (k exp*)
                   (bind ((t (generate-symbol env)))
                     `(%bind (,t ,exp*)
                        ,(k t)))))))

(define-function normalize** (exp* env k)
  (if (empty? exp*)
      (k [])
      (normalize-all exp* env k)))

(define-function normalize-all (exp env k)
  (normalize* (first exp) env
              (method (t)
                (normalize** (rest exp) env
                             (method (t*)
                               (k (cons t t*)))))))
