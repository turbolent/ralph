
(define-module ralph/compiler/statements.test
  import: (ralph/test
           ralph/compiler/macroexpansion
           ralph/compiler/anf
           ralph/compiler/statements
           ralph/compiler/environment.test))


(define *environment*
  (make-test-environment "ralph/compiler/statements.test"))


;;;; 

;; TODO [#A] $1 and $2 not namespaced, but $3 is?!

(reset-symbol-counter!)
(check-equal "statements: or"
             `(%begin
                (%var ,'$1 #f)
                (%begin
                  (%var $3 #f)
                  (%begin
                   (%if ((%native "$T") ,'$1)
                        (%set $3 ,'$1)
                        (%begin
                          (%var ,'$2 2)
                          (%if ((%native "$T") ,'$2)
                               (%set $3 ,'$2)
                               (%set $3 3))))
                   (foo $3 bar))))
              (transform-statements!
               (normalize-term
                (macroexpand-all
                 `(foo (or #f 2 3) bar)
                 *environment*)
                *environment*)
               *environment*))


(reset-symbol-counter!)
(check-equal "statements: if exp. in if stmt."
             `(%begin
                (%var $1 #f)
                (%begin
                 (%if ((%native "$T") a)
                      (%set $1 1)
                      (%set $1 2))
                 (%if ((%native "$T") $1)
                      3
                      4)))
             (transform-statements!
               (normalize-term
                (macroexpand-all
                 `(if (if a 1 2) 3 4)
                 *environment*)
                *environment*)
               *environment*))

(reset-symbol-counter!)
(check-equal "statements: while exp. in while stmt."
             `(%while ((%native "$T") (,'> ,'a 2))
                (%begin
                  (%var ,'a #f)
                  (%begin
                   (%begin
                    (%while ((%native "$T") (,'< ,'b 3))
                      (%if ((%native "$T") ,'a)
                           (%begin
                             (%var ,'c #f)
                             (%begin
                              (%if ((%native "$T") ,'c)
                                   (%set ,'c 5)
                                   (%set ,'c 6))
                              ,'c))
                           #f))
                    (%set ,'a #f))
                   4)))
             (transform-statements!
               (normalize-term
                (macroexpand-all
                 '(while (> a 2)
                    (bind ((a (while (< b 3)
                                (if a
                                    (bind ((c (if c 5 6)))
                                      c)
                                    #f))))
                      4))
                 *environment*)
                *environment*)
               *environment*))


(reset-symbol-counter!)
(check-equal "statements: value of while applied to method"
             `(%begin
                (%var ,'y 5)
                (%begin
                  (%var $2 (%method ,'$1 (,'x)
                             (%if ((%native "$T") ,'x)
                                   (%native-call "return" 1)
                                   (%native-call "return" 2))))
                  (%begin
                    (%var $3 #f)
                    (%begin
                     (%begin
                      (%while ((%native "$T") (,'> ,'y 2))
                        (%set ,'y (- ,'y 1)))
                      (%set $3 #f))
                     ($2 $3)))))
             (transform-statements!
               (normalize-term
                (macroexpand-all
                 '(bind ((y 5))
                    ((method (x) (if x 1 2))
                     (while (> y 2)
                       (dec! y))))
                 *environment*)
                *environment*)
               *environment*))