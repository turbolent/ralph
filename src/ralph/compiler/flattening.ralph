(define-module ralph/compiler/flattening
  import: (ralph/compiler/utilities)
  export: (flatten-statements!))

(define-function flatten-begins (exps)
  (reduce1 concatenate
           (map (method (exp)
                  (bind ((flattened (flatten-statements! exp)))
                    (if (op? "%begin" flattened)
                        (rest flattened)
                        [flattened])))
                exps)))

(define-function flatten-statements! (exp)
  (if (instance? exp <array>)
      (select (symbol-name (first exp)) ==
        (("%quote")
         exp)
        (("%bind")
         (destructuring-bind (_ binding body) exp
           (flatten-statements!
            `(%begin
              (%var ,@binding)
              ,body))))
        (("%method" "%set" "%while")
         (set! (last exp)
               (flatten-statements! (last exp)))
         exp)
        (("%if")
         (set! (third exp)
               (flatten-statements! (third exp)))
         (set! (last exp)
               (flatten-statements! (last exp)))
         exp)
        (("%begin")
         (destructuring-bind (_ #rest forms) exp
           (bind ((forms* (flatten-begins forms)))
             (if (< (size forms*) 2)
                 (first forms*)
                 `(%begin ,@forms*)))))
        (("%try")
         (set! (second exp)
               (flatten-statements! (second exp)))
         (set! (last exp)
               (flatten-statements! (last exp)))
         exp)
        (else:
         (map flatten-statements! exp)))
      exp))
