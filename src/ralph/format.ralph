(define-module ralph/format
  import: (ralph/stream)
  export: (format-to-string format))

;; TODO:
(define-function format-integer ((number <number>))
  (as-string number))

;; Format a string and write it to a stream.
(define-function format ((stream <stream>) (control-string <string>) #rest args)
  (bind-methods ((dispatch (char arg)
                   (select (as-lowercase char) ==
                     (("s" "c")
                      (as-string arg))
                     (("=")
                      (or (description arg) ""))
                     (("b")
                      (format-integer arg 2))
                     (("o")
                      (format-integer arg 8))
                     (("d")
                      (format-integer arg 10))
                     (("x")
                      (format-integer arg 16))
                     (("m")
                      (arg stream)
                      "")
                     ;; TODO: make condition
                     (else:
                      (signal (make <error> message:
                                    (concatenate "Unknown format dispatch character "
                                                 char)))))))
    (bind ((index 0))
      (while (not (empty? control-string))
        (bind ((next-dispatch (position control-string "%")))
          (if (> next-dispatch 0)
              ;; write part upto next dispatch
              (begin
               (stream-write stream (slice control-string 0 next-dispatch))
               (set! control-string
                     (slice control-string next-dispatch)))
              (if next-dispatch
                  ;; dispatch
                  (bind ((arg (element args index))
                         (char (second control-string))
                         (percent (== char "%")))
                    (stream-write stream (if percent "%" (dispatch char arg)))
                    (set! control-string
                          (slice control-string 2))
                    (unless percent
                      (inc! index)))
                  (begin
                   (stream-write stream control-string)
                   (set! control-string "")))))))))

;; Process a format string and return the result as another string.
;; (Effectively calls format and returns the result as a string.)
(define-function format-to-string ((control-string <string>) #rest args)
  (bind ((stream (make <string-stream>)))
    (apply format stream control-string args)
    (stream-contents stream)))

