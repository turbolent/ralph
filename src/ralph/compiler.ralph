
(define-module ralph/compiler
  import: (ralph/format
           ralph/stream
           ralph/file-stream
           ralph/file-system
           ralph/compiler/utilities
           ralph/compiler/module
           ralph/compiler/environment
           ralph/compiler/reader
           ralph/compiler/macros
           ralph/compiler/special-forms
           ralph/compiler/macroexpansion
           ralph/compiler/symbol-lifting
           ralph/compiler/alpha
           ralph/compiler/anf
           ralph/compiler/statements
           ralph/compiler/javascript)
  export: (compile-module))


;; module-name => <module>
(define *modules* (make-object))

(define-function compile-time-import-module (env module-name #key options)
  ;; core and internal macros are already implicitly imported
  (unless (== module-name "ralph/core")
    ;; ensure latest version is compiled
    (compile-module module-name)
    ;; load module
    (bind ((definitions (%native-call "require" module-name))
           (macros (make-plain-object))
           (symbol-macros (make-plain-object)))
      ;; find macros in exported definitions
      (do (method (name)
            (bind ((definition (get definitions name)))
              (cond
               ((get definition "%macro?")
                (set! (get macros name)
                      definition))
               ((get definition "%symbol-macro?")
                (set! (get symbol-macros name)
                      definition)))))
          (apply process-import-names
                 (object-properties definitions)
                 options))
      ;; chain new macros into environment
      (chain-object macros
                    (get env "macros"))
      (set! (get env "macros")
            macros)
      (chain-object symbol-macros
                    (get env "symbol-macros"))
      (set! (get env "symbol-macros")
            symbol-macros))))

(define-function import-module (module module-name #rest options)
  ;; TODO: open database first
  (if-bind (other-module (find-module module-name))
    (begin
     (push (get module "imports")
           [other-module
            (apply process-import-names
                   (get other-module "exports")
                   options)])
     (push (get module "dependencies")
           module-name)
     other-module)
    (signal (format-to-string
             "Unable to import module '%s'"
             module-name))))

(define-function find-module (module-name)
  (or (compile-module module-name)
      (get *modules* module-name)
      (read-module "build" module-name)
      (read-module "src" module-name)))

(define-function read-module (base-path module-name)
  (bind ((path (module-path base-path module-name)))
    (when (file-exists? path)
      (apply (curry make <module> name:)
             (read (make <string-stream>
                         string: (read-file path)))))))


(define-function compile-expression (exp env)
  (reduce (method (result name/pass)
            (destructuring-bind (name pass) name/pass
              ;; (format-out "\n### %s:\n" name)
              (bind ((result (pass result)))
                ;; (format-out "%=\n" result)
                result)))
          exp
          [["macroexpansion"
            (rcurry macroexpand-all env)]
           ["symbol lifting"
            (rcurry lift-symbols env)]
           ["alpha conversion"
            (rcurry alpha-convert-form env)]
           ["ANF transformation"
            (rcurry normalize-term env)]
           ["statement transfomation"
            (rcurry transform-statements! env)]
           ["code generation"
            (rcurry compile-js env)]]))

(define-function executable-path (module-name)
  (resolve-path "build" (concatenate module-name ".js")))

(define-function module-path (base-path module-name)
  (resolve-path base-path
                (concatenate module-name ".rm")))

(define-function source-path (module-name)
  (resolve-path "src" (concatenate module-name ".ralph")))

(define-function recompile? (module-name)
  (and (not (get *modules* module-name "native?"))
       (bind ((path (executable-path module-name)))
         (or (not (file-exists? path))
             (bind ((path2 (source-path module-name)))
               (< (get (file-properties path) "modification-date")
                  (get (file-properties path2) "modification-date")))))))


(define-function compile-form (form stream env)
  (stream-write stream
                (compile-expression form env)))


(define-function compile-stream (input-stream output-stream env)
  (bind ((read? #t))
    (while read?
      (bind ((form (read input-stream env eof-error?: #f)))
       (set! read? (not (== form $end-of-file)))
       (when read?
         (compile-form form output-stream env))))))


(define-function compile-module (module-name)
  ;; module in source directory? (native)
  (unless (has? *modules* module-name)
    (if-bind (module (read-module "src" module-name))
      (set! (get *modules* module-name)
            module)))
  (when (recompile? module-name)
    (format-out "Compiling: %s\n" module-name)
    (unless (file-exists? (source-path module-name))
      (signal (format-to-string
              "Unable to compile non-existing module '%s'"
              module-name)))
    (bind ((module (make <module> name: module-name))
           (env (make <environment>
                      module: module
                      special-forms: $internal-special-forms
                      macros: $all-macros
                      symbol-macros: $all-symbol-macros))
           (target-path (executable-path module-name))
           (output-stream
            (begin
              ;; TODO: should be ensured by
              ;; (make <file-stream> if-does-not-exist: 'create
              (ensure-directories-exist target-path)
              (make <file-stream>
                    path: target-path
                    direction: 'output)))
           ;; TODO: read directly from <file-stream>
           (source (read-file (source-path module-name)))
           (input-stream (make <string-stream>
                         string: source)))
      (set! (get *modules* module-name)
            module)
      ;; special case core?
      (unless (== module-name "ralph/core")
        ;; implicitly import and load core
        (import-module module "ralph/core")
        (compile-form (make-import-definition "ralph/core" env)
                      output-stream
                      env))
      ;; write executable
      (compile-stream input-stream output-stream env)
      (stream-close output-stream)
      ;; write module
      (write-file (module-path "build" module-name)
                  ;; ignore imports for now
                  (description [module-name
                                exports: (get module "exports")
                                inline: (object-properties (get module "inline"))
                                dependencies: (get module "dependencies")]))
      (format-out "Finished: %s\n" module-name)
      module)))


;; => [module-name options])
(define-function destructure-import (import)
  [(symbol-name
    (if (instance? import <array>)
        (first import)
        import))
   (if (instance? import <array>)
       (rest import)
       [])])

(set! (get $internal-macros "define-module")
      (method (env _ #key (import [])
                          (export [])
                          (compile-time-import [])
                          (inline []))
        (bind-properties (module import-identifiers) env
          ;; exports
          (set! (get module "exports")
                (map identifier-name export))
          ;; compile-time imports
          (do (method (import)
                (destructuring-bind (module-name options)
                    (destructure-import import)
                  (apply compile-time-import-module
                         env module-name options)))
              compile-time-import)
          ;; inline
          (do (method (name)
                (set! (get module "inline" name) #t))
              (map identifier-name inline))
          ;; imports
          `(begin
            ,@(map (method (import)
                     (destructuring-bind (module-name options)
                         (destructure-import import)
                       (apply import-module
                              module module-name options)
                       (make-import-definition module-name env)))
                   import)))))


;;;; macros

(define $all-symbol-macros
  (make-plain-object))

(extend! $all-symbol-macros $internal-symbol-macros)
(extend! $all-symbol-macros $core-symbol-macros)

(define $all-macros
  (make-plain-object))

(extend! $all-macros $internal-macros)
(extend! $all-macros $core-macros)


;; NOTE: ensure an internal macro exists for each core special form

(do (method (name)
      (unless (has? $internal-macros name)
        (signal (format-to-string
                 "No internal macro for special form: %s" name))))
    (object-properties $core-special-forms))

