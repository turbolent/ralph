(define-module ralph/repl/evaluator
  import: (ralph/format)
  export: (<evaluator> start-evaluator
           handle-message change-module))

(define-class <evaluator> (<object>))

(define-generic prepare-evaluator ((evaluator <evaluator>)))

(define-generic connect-to-interactor ((evaluator <evaluator>)))

(define-generic inject-commands! ((evaluator <evaluator>)))

(define-method start-evaluator ((evaluator <evaluator>) url)
  (prepare-evaluator evaluator)
  (inject-commands! evaluator)
  (connect-to-interactor evaluator url))

(define-method handle-message ((evaluator <evaluator>) serialized-message)
  (bind ((message (parse-json serialized-message)))
    (if-bind (handler (get $handlers (get message "type")))
      (handler evaluator message))))

(define-generic send-data ((evaluator <evaluator>) data))

(define-method send-command ((evaluator <evaluator>) type #rest data)
  (send-data evaluator (as-json (apply make-object "type" type data))))

(define-method change-module ((evaluator <evaluator>) name)
  (perform-module-change evaluator name)
  (send-command evaluator "change-module"
                "name" name))

(define-generic evaluate ((evaluator <evaluator>) code))

(define-method perform-module-change ((evaluator <evaluator>) name)
  (bind ((eval (get evaluator "evals" name)))
    (unless eval
      (bind ((code (format-to-string "require('%s')" name))
             (exports (evaluate evaluator code)))
        (set! eval (get exports "%eval"))
        (set! (get evaluator "evals" name)
              eval)))
    (set! (get evaluator "current-eval")
          eval)))

(define $handlers (make-plain-object))

(set! (get $handlers "change-module")
      (method (evaluator message)
        (bind-properties (name) message
          (perform-module-change evaluator name))))

(set! (get $handlers "eval-in-module")
      (method (evaluator message)
        (bind-properties (code) message
          (bind-properties (current-eval) evaluator
            (handler-case
             (bind ((result (current-eval code)))
               (send-command evaluator "result"
                             "result" (description result)))
             ((<error> condition: condition)
              (send-command evaluator "exception"
                            "stack" (get condition "stack"))))))))